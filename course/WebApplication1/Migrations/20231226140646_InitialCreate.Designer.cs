// <auto-generated />
using System;
using EntityFrameworkCore.MySQL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(RepairManagementDbContext))]
    [Migration("20231226140646_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EntityFrameworkCore.MySQL.Models.Goods", b =>
                {
                    b.Property<int>("IdGoods")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idGoods");

                    b.Property<string>("GoodsName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("GoodsName");

                    b.Property<int?>("GoodsPrice")
                        .HasColumnType("int")
                        .HasColumnName("GoodsPrice");

                    b.Property<int?>("GoodsType")
                        .HasColumnType("int")
                        .HasColumnName("GoodsType");

                    b.Property<int>("IdManufacturer")
                        .HasColumnType("int")
                        .HasColumnName("idManufacturer");

                    b.HasKey("IdGoods");

                    b.HasIndex("IdManufacturer");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("EntityFrameworkCore.MySQL.Models.GoodsParam", b =>
                {
                    b.Property<int>("IdGoodsParam")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idGoodsParam");

                    b.Property<string>("GoodsParamMeasure")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("GoodsParamMeasure");

                    b.Property<string>("GoodsParamName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("GoodsParamName");

                    b.Property<string>("GoodsParamValue")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("GoodsParamValue");

                    b.Property<int>("IdGoods")
                        .HasColumnType("int")
                        .HasColumnName("idGoods");

                    b.HasKey("IdGoodsParam");

                    b.HasIndex("IdGoods");

                    b.ToTable("GoodsParams");
                });

            modelBuilder.Entity("EntityFrameworkCore.MySQL.Models.Storage", b =>
                {
                    b.Property<int>("IdStorage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idStorage");

                    b.Property<int>("IdGoods")
                        .HasColumnType("int")
                        .HasColumnName("idGoods");

                    b.Property<int>("IdWarehouse")
                        .HasColumnType("int")
                        .HasColumnName("idWarehouse");

                    b.Property<int?>("StorageCount")
                        .HasColumnType("int")
                        .HasColumnName("StorageCount");

                    b.HasKey("IdStorage");

                    b.HasIndex("IdGoods");

                    b.HasIndex("IdWarehouse");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("EntityFrameworkCore.MySQL.Models.Supplier", b =>
                {
                    b.Property<int>("IdSupplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idSupplier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Address");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("SupplierName");

                    b.HasKey("IdSupplier");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("EntityFrameworkCore.MySQL.Models.Transaction", b =>
                {
                    b.Property<int>("IdTransaction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTransaction");

                    b.Property<int>("IdBuyer")
                        .HasColumnType("int")
                        .HasColumnName("idBuyer");

                    b.Property<int>("IdGoods")
                        .HasColumnType("int")
                        .HasColumnName("idGoods");

                    b.Property<int>("IdSupplier")
                        .HasColumnType("int")
                        .HasColumnName("idSupplier");

                    b.Property<int>("IdWarehouseReceiver")
                        .HasColumnType("int")
                        .HasColumnName("idWarehouseReceiver");

                    b.Property<int>("IdWarehouseSender")
                        .HasColumnType("int")
                        .HasColumnName("idWarehouseSender");

                    b.Property<int?>("TransactionCount")
                        .HasColumnType("int")
                        .HasColumnName("TransactionCount");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("TransactionDate");

                    b.HasKey("IdTransaction");

                    b.HasIndex("IdBuyer");

                    b.HasIndex("IdGoods");

                    b.HasIndex("IdSupplier");

                    b.HasIndex("IdWarehouseReceiver");

                    b.HasIndex("IdWarehouseSender");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("EntityFrameworkCore.MySQL.Models.Warehouse", b =>
                {
                    b.Property<int>("IdWarehouse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idWarehouse");

                    b.Property<string>("WarehouseAddress")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("WarehouseAddress");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("WarehouseName");

                    b.Property<string>("WarehousePhone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("WarehousePhone");

                    b.HasKey("IdWarehouse");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("WebApplication1.Models.Buyer", b =>
                {
                    b.Property<int>("IdBuyer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idBuyer");

                    b.Property<string>("BuyerName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("BuyerName");

                    b.Property<string>("BuyerPhone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("BuyerPhone");

                    b.HasKey("IdBuyer");

                    b.ToTable("Buyers");
                });

            modelBuilder.Entity("WebApplication1.Models.Manufacturer", b =>
                {
                    b.Property<int>("IdManufacturer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idManufacturer");

                    b.Property<string>("ManufactureAddress")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Manufactureaddress");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ManufacturerName");

                    b.HasKey("IdManufacturer");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("EntityFrameworkCore.MySQL.Models.Goods", b =>
                {
                    b.HasOne("WebApplication1.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("IdManufacturer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("EntityFrameworkCore.MySQL.Models.GoodsParam", b =>
                {
                    b.HasOne("EntityFrameworkCore.MySQL.Models.Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("IdGoods")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");
                });

            modelBuilder.Entity("EntityFrameworkCore.MySQL.Models.Storage", b =>
                {
                    b.HasOne("EntityFrameworkCore.MySQL.Models.Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("IdGoods")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameworkCore.MySQL.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("IdWarehouse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EntityFrameworkCore.MySQL.Models.Transaction", b =>
                {
                    b.HasOne("WebApplication1.Models.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("IdBuyer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameworkCore.MySQL.Models.Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("IdGoods")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameworkCore.MySQL.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("IdSupplier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameworkCore.MySQL.Models.Warehouse", "WarehouseReceiver")
                        .WithMany()
                        .HasForeignKey("IdWarehouseReceiver")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameworkCore.MySQL.Models.Warehouse", "WarehouseSender")
                        .WithMany()
                        .HasForeignKey("IdWarehouseSender")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Goods");

                    b.Navigation("Supplier");

                    b.Navigation("WarehouseReceiver");

                    b.Navigation("WarehouseSender");
                });
#pragma warning restore 612, 618
        }
    }
}
